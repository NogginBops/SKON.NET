using System.Collections.Generic;
using System.Globalization;
using SKON.Internal.Utils;

COMPILER SKON

	public SKONObject metadata = new SKONObject();

    public SKONObject data = new SKONObject();

	private string[] dateTimeFormats = {
        "yyyy-MM-dd",
        "hh:mm:ssZ",
        "hh:mm:ss.fffZ",
        "hh:mm:sszzz",
        "hh:mm:ss.fffzzz",
        "yyyy-MM-ddThh:mm:ssZ",
        "yyyy-MM-ddThh:mm:ss.fffZ",
        "yyyy-MM-ddThh:mm:sszzz",
        "yyyy-MM-ddThh:mm:ss.fffzzz"
    };

    private DateTime ParseDatetime(string value)
    {
        DateTime dateTime;

        if (DateTime.TryParseExact(value, dateTimeFormats, null, DateTimeStyles.None, out dateTime))
        {
            return dateTime;
        }
        else
        {
			SynErr(13);
            return default(DateTime);
        }
    }

/*-------------------------------------------------------------------------*/
CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.  
  stringch  = ANY - '"' - '\\' - cr - lf.
  charch    = ANY - '\'' - '\\' - cr - lf.
  printable =  '\u0020' .. '\u007e'.
  escapech    = "bnfrt/" + '\\' + '"'.  
  hex       = "0123456789abcdefABCDEF".
  dot       = '.'.

TOKENS
  tilda     = '~'.
  colon     = ':'.
  comma     =  ','.
  lbrace    = '{'.
  rbrace    = '}'.
  lbracket  = '['.
  rbracket  = ']'.
  ident     = stringch { stringch } ':'.
  string_   = '"' { stringch | '\\' escapech } '"'.
  badString = '"' { stringch | '\\' escapech } (cr | lf).
  integer_  = ['-'] digit {digit}.
  double_   = ['-'] digit {digit} (((dot digit {digit}) [('E' | 'e') [('+' | '-')] digit {digit}]) | (('E' | 'e') [('+' | '-')] digit {digit})).
  datetime_	= ( digit digit digit digit '-' digit digit '-' digit digit
			| digit digit ':' digit digit ':' digit digit ('Z'|'z')
			| digit digit ':' digit digit ':' digit digit '.' digit digit digit ('Z'|'z')
			| digit digit ':' digit digit ':' digit digit ('+'|'-') digit digit ':' digit digit
			| digit digit ':' digit digit ':' digit digit '.' {digit} ('+'|'-') digit digit ':' digit digit
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit ('Z'|'z')
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit '.' digit digit digit ('Z'|'z')
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit ('+'|'-') digit digit ':' digit digit
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit '.' digit digit digit ('+'|'-') digit digit ':' digit digit ).

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE ' ' + '\r' + '\t' + '\n'

PRODUCTIONS
/*-------------------------------------------------------------------------*/
SKON															(. Dictionary<string, SKONObject> mapElements = new Dictionary<string, SKONObject>();
																   int version; string docVersion; string skema; .)
=	meta_version<out version>									(. metadata.LanguageVersion = version; .)
	meta_docVersion<out docVersion>								(. metadata.DocuemntVersion = docVersion; .)
	[ 
		meta_SKEMA<out skema>									(. metadata.SKEMA = skema; .)
	]
	open_map<out mapElements>									(. this.data = new SKONObject(mapElements); .)
    .															

/*-------------------------------------------------------------------------*/
meta_version<out int ver>
=	tilda
	"Version" colon 
	integer_													(. if (int.TryParse(t.val, out ver) == false) ver = -1; .)
	tilda.

/*-------------------------------------------------------------------------*/
meta_docVersion<out string ver>
=	tilda
	"DocumentVersion" colon 
	string_														(. if (t.val.Length > 2) ver = ParserUtils.EscapeString(t.val.Substring(1, t.val.Length - 2)); else ver = "INVALID"; .)
	tilda.

/*-------------------------------------------------------------------------*/
meta_SKEMA<out string skema>
=	tilda
	"SKEMA" colon
	string_														(. if (t.val.Length > 2) skema = ParserUtils.EscapeString(t.val.Substring(1, t.val.Length - 2)); else skema = "INVALID"; .)
	tilda.

/*-------------------------------------------------------------------------*/
skon_map<out SKONObject map>									(. Dictionary<string, SKONObject> mapElements; .)
=	lbrace
    open_map<out mapElements>									(. map = new SKONObject(mapElements); .)
    rbrace
    .

/*-------------------------------------------------------------------------*/
skon_array<out SKONObject array>								(. List<SKONObject> arrayElements; .)
=	lbracket
    open_array<out arrayElements>								(. array = new SKONObject(arrayElements); .)
    rbracket
    .

/*-------------------------------------------------------------------------*/
open_map<. out Dictionary<string, SKONObject> mapElements .>	(. string key; SKONObject value; mapElements = new Dictionary<string, SKONObject>(); .)
=	{
        map_element <out key, out value>						(. mapElements[key] = value; .)
		WEAK comma
    }
    .

/*-------------------------------------------------------------------------*/
map_element<out string key, out SKONObject obj>					(. string name; SKONObject skonObject; .)
=	Ident<out name>												(. key = name; .)
    value<out skonObject>										(. obj = skonObject; .)
    .

/*------------------------------------------------------------------------*/
Ident<out string name>
= ident															(. name = t.val; .).

/*-------------------------------------------------------------------------*/
open_array<. out List<SKONObject> arrayElements .>				(. SKONObject skonObject; arrayElements = new List<SKONObject>(); .)
=	{
        value<out skonObject>									(. arrayElements.Add(skonObject); .)
		WEAK comma 
    }
    .

/*-------------------------------------------------------------------------*/
value<out SKONObject skonObject>								(. skonObject = null; .)
=	string_														(. skonObject = new SKONObject(ParserUtils.EscapeString(t.val.Substring(1, t.val.Length - 2))); .)
    | integer_													(. skonObject = new SKONObject(int.Parse(t.val)); .)
    | double_													(. skonObject = new SKONObject(double.Parse(t.val, CultureInfo.InvariantCulture)); .)
    | datetime_													(. skonObject = new SKONObject(ParseDatetime(t.val)); .)
	| skon_map<out skonObject>									
    | skon_array<out skonObject>										
    | "true"													(. skonObject = new SKONObject(true); .)
    | "false"													(. skonObject = new SKONObject(false); .)
    .												
               
END SKON.