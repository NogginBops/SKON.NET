using System.Collections.Generic;
using System.Globalization;
using SKON.Internal.Utils;

COMPILER SKEMA

	public SKONMetadata metadata = new SKONMetadata();

    public SKEMAObject data = SKEMAObject.Any;

	public Dictionary<string, SKEMAObject> definitions = new Dictionary<string, SKEMAObject>();

/*-------------------------------------------------------------------------*/
CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.  
  stringch  = ANY - '"' - '\\' - cr - lf.
  charch    = ANY - '\'' - '\\' - cr - lf.
  printable =  '\u0020' .. '\u007e'.
  escapech    = "bnfrt" + '\\' + '"'.  
  hex       = "0123456789abcdefABCDEF".
  dot       = '.'.
  identch	= ANY - '{' - '}' - '[' - ']' - '"' - '.' - ',' - '~' - ':' - '\r' - '\n' - '\t' - ' ' - '-'.
  meta		= '-'.

TOKENS
  dash		= '-'.
  colon     = ':'.
  comma     = ','.
  lbrace    = '{'.
  rbrace    = '}'.
  lbracket  = '['.
  rbracket  = ']'.
  ident     = identch { identch | '-' } CONTEXT (":").
  version	= meta "Version" CONTEXT (':').
  docver	= meta "DocumentVersion" CONTEXT (':').
  string_   = '"' { stringch | '\\' escapech | '\\' 'u' hex hex hex hex} '"'.
  badString = '"' { stringch | '\\' escapech } (cr | lf).
  integer_  = ['-'] digit {digit}.

  ref = '#' identch { identch | '-' }.
  def = "define".
  opt = "optional".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE ' ' + '\r' + '\t' + '\n'

PRODUCTIONS
/*-------------------------------------------------------------------------*/
SKEMA																(.  Dictionary<string, SKEMAObject> mapElements;
																		Dictionary<string, bool> optionalMap;
																		int version; string docVersion; string skema; .)
=	meta_version<out version>										(. metadata.LanguageVersion = version; .)
	meta_docVersion<out docVersion>									(. metadata.DocuemntVersion = docVersion; .)
	open_skema_map<out mapElements, out optionalMap>				(. this.data = new SKEMAObject(mapElements, optionalMap); .)
    .															

/*-------------------------------------------------------------------------*/
meta_version<out int ver>
=	version colon
	integer_														(. if (int.TryParse(t.val, out ver) == false) ver = -1; .)
	dash
	.

/*-------------------------------------------------------------------------*/
meta_docVersion<out string ver>
=	docver colon
	string_															(. if (t.val.Length > 2) ver = ParserUtils.EscapeString(t.val.Substring(1, t.val.Length - 2)); else ver = "INVALID"; .)
	dash
	.

/*-------------------------------------------------------------------------*/
skema_map<out SKEMAObject map>										(. Dictionary<string, SKEMAObject> mapElements; Dictionary<string, bool> optionalMap; .)
=	lbrace
	open_skema_map<out mapElements, out optionalMap>				(. map = new SKEMAObject(mapElements, optionalMap); .)
	rbrace
	.

/*-------------------------------------------------------------------------*/
skema_array<out SKEMAObject array>									(. SKEMAObject skemaObj; .)
=	lbracket
	skema_value<out skemaObj>										(. array = SKEMAObject.ArrayOf(skemaObj); .)
	rbracket
	.

/*-------------------------------------------------------------------------*/
open_skema_map<. out Dictionary<string, SKEMAObject> mapElements, out Dictionary<string, bool> optionalMap .>	(. string key; SKEMAObject value; bool optional; mapElements = new Dictionary<string, SKEMAObject>(); optionalMap = new Dictionary<string, bool>(); .)
=	{
		(
			skema_map_element<out key, out value, out optional>													(. mapElements[key] = value; if(optional) { optionalMap[key] = true; } .)
			| definition<out key, out value>																	(. definitions[key] = value; .)
		)							
		WEAK comma
	}
	.

/*-------------------------------------------------------------------------*/
skema_map_element<out string key, out SKEMAObject obj, out bool optional>	(. optional = false; .)
=	[
		opt																	(. optional = true; .)
	]
	Ident<out key>													
    colon 
    skema_value<out obj>											
    .

/*-------------------------------------------------------------------------*/
definition<out string key, out SKEMAObject def>
=	def Ident<out key> 
	colon
	skema_value<out def>
	.

/*------------------------------------------------------------------------*/
Ident<out string name>
= ident																(. name = t.val; .)
  .
											
/*-------------------------------------------------------------------------*/
type<out SKEMAObject skemaObj>										(. skemaObj = null; .)
=	"Any"															(. skemaObj = SKEMAObject.Any; .)
	| "String"														(. skemaObj = SKEMAObject.String; .)
	| "Integer"														(. skemaObj = SKEMAObject.Integer; .)
	| "Float"														(. skemaObj = SKEMAObject.Float; .)
	| "Boolean"														(. skemaObj = SKEMAObject.Boolean; .)
	| "DateTime"													(. skemaObj = SKEMAObject.DateTime; .)
	.

/*-------------------------------------------------------------------------*/
skema_value<out SKEMAObject skemaObj>								(. skemaObj = null; .)
=	type<out skemaObj>
	| skema_map<out skemaObj>
	| skema_array<out skemaObj>
	| ref															(. skemaObj = new SKEMAObject(t.val.Substring(1)); .)
	.

END SKEMA.